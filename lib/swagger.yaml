swagger: "2.0"
info:
  version: 1.0.0
  title: Secrets-API
  description: Secrets-API provides a REST backend to store secret information in an encrypted form.

consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: Format is "Bearer [JWT FROM LOGIN/SIGNUP ENDPOINT]"

definitions:
  secretResponse:
    type: object
    required:
      - title
      - content
      - secretId
      - owner
      - createdAt
      - updatedAt
    properties:
      title:
        type: string
        description: Not encrypted, but searchable.
      content:
        type: string
        description: Encrypted, but not searchable.
      owner:
        type: string
        minLength: 24
        maxLength: 24
      secretId:
        type: string
        minLength: 24
        maxLength: 24
      createdAt:
        type: string
      updatedAt:
        type: string

  accountResponse:
    type: object
    properties:
      accountId:
        type: string
      username:
        type: string
    required:
      - accountId
      - username

  jwtResponse:
    type: object
    properties:
      jwt:
        type: string
    required:
      - jwt

  errorResponse:
    type: object
    properties:
      status:
        type: number
      message:
        type: string
      code:
        type: string
      name:
        type: string
      details:
        type: string
      type:
        type: string

parameters:
  secretId:
    name: secretId
    in: path
    description: ID of the secret
    type: string
    required: true
    maxLength: 24
    minLength: 24

  search:
    name: search
    in: query
    description: Text to search for
    type: string
    required: false

  sortField:
    name: sortField
    in: query
    description: Field to sort by
    type: string
    required: false

  sortOrder:
    name: sortOrder
    in: query
    description: Either 1 (ascending) or -1 (descending). Defaults to 1.
    type: integer
    required: false
    enum: [-1, 1]
    default: 1

  secretRequired:
    name: Secret
    in: body
    description: Requires all writeable fields of a Secret object to be specified. Note that only `content` is encrypted.
    required: true
    schema:
      title: Secret
      description: Requires all writeable fields of a Secret object to be specified. Note that only `content` is encrypted.
      type: object
      properties:
        title:
          type: string
          description: Not encrypted, but searchable.
        content:
          type: string
          description: Encrypted, but not searchable.
      required:
        - title
        - content

  secretOptional:
    name: Secret
    in: body
    description: Object must be passed, but does not require any writeable fields of a Secret object to be specified. Note that only `content` is encrypted.
    required: true
    schema:
      title: Secret
      description: Object must be passed, but does not require any writeable fields of a Secret object to be specified. Note that only `content` is encrypted.
      type: object
      properties:
        title:
          type: string
          description: Not encrypted, but searchable.
        content:
          type: string
          description: Encrypted, but not searchable.

  accountId:
    name: accountId
    in: path
    description: ID of the account. Can use 'me' for logged-in user.
    type: string
    required: true
    pattern: /(^[a-zA-Z0-9]{24}|me)$/i

  accountCredentials:
    name: Account
    in: body
    description: Account object containing the username and password.
    required: true
    schema:
      title: Account
      description: Account object containing the username and password.
      type: object
      properties:
        username:
          type: string
          description: Unique across entire system
        password:
          type: string
          description: Used to envelope-encrypt encryption key. Never stored directly in database
      required:
        - username
        - password

  accountOptional:
    name: Account
    in: body
    description: Account object containing the parameters to update
    required: true
    schema:
      title: Account
      description: Account object containing the parameters to update
      type: object
      properties:
        username:
          type: string
          description: Unique across entire system
        password:
          type: string
          description: Used to envelope-encrypt encryption key. Never stored directly in database

  jwtIds:
    name: jwtIds
    description: Object containing list JWTs to revoke. "*" can be used to revoke all. Currently supports for for only one JWT ID (array length of 1).
    in: body
    required: false
    schema:
      type: object
      title: JWT IDS
      description: Object containing list JWTs to revoke. "*" can be used to revoke all. Currently supports for for only one JWT ID (array length of 1).
      properties:
        jwtIds:
          type: array
          description: "Array of JWT IDs"
          items:
            type: "string"
            pattern: /(^[a-zA-Z0-9]{24}|\*)$/i

paths:
  /api-docs:
    get:
      operationId: getApiDocs
      description: get the API docs, used by swagger
      tags: ["Schema"]
      responses:
        200:
          description: JSON of all API endpoints
          schema:
            type: object
            description: JSON of all API endpoints
  /accounts/signup:
    post:
      tags: ["Account"]
      operationId: postAccountSignup
      description: Signup for a new account.
      parameters:
        - $ref: "#/parameters/accountCredentials"
      responses:
        201:
          description: JWT
          schema:
            $ref: "#/definitions/jwtResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/errorResponse"

  /accounts/login:
    post:
      tags: ["Account"]
      operationId: postAccountLogin
      description: Login to account.
      parameters:
        - $ref: "#/parameters/accountCredentials"
      responses:
        200:
          description: JWT
          schema:
            $ref: "#/definitions/jwtResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/errorResponse"

  /accounts/{accountId}:
    parameters:
      - $ref: "#/parameters/accountId"
    get:
      security:
        - Bearer: []
      tags: ["Account"]
      description: Get account information
      operationId: getAccountByAccountId
      responses:
        200:
          description: Account object containing the accountId and username
          schema:
            $ref: "#/definitions/accountResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/errorResponse"
    #patch:
    #  security:
    #    - Bearer: []
    #  tags: ["Account"]
    #  description: Update account information
    #  operationId: patchAccountByAccountId
    #  parameters:
    #    - $ref: "#/parameters/accountOptional"
    #  responses:
    #    200:
    #      description: Account object containing the accountId and username
    #      schema:
    #        $ref: "#/definitions/accountResponse"
    #    default:
    #      description: Error
    #      schema:
    #        $ref: "#/definitions/errorResponse

  /accounts/{accountId}/logout:
    post:
      security:
        - Bearer: []
      tags: ["Account"]
      description: Logout
      operationId: Log out by revoking one or all JWTs
      parameters:
        - $ref: "#/parameters/accountId"
        - $ref: "#/parameters/jwtIds"
      responses:
        204:
          description: Response is empty
          schema:
            type: object
        default:
          description: Error
          schema:
            $ref: "#/definitions/errorResponse"

  /secrets:
    get:
      security:
        - Bearer: []
      tags: ["Secret"]
      description: Get all secrets
      operationId: getSecrets
      parameters:
        - $ref: "#/parameters/search"
        - $ref: "#/parameters/sortField"
        - $ref: "#/parameters/sortOrder"
      responses:
        200:
          description: Response contains object with key `secrets` and value of array of secret ids
          schema:
            type: object
            properties:
              secrets:
                type: array
                items:
                  $ref: "#/definitions/secretResponse"
            required:
              - secrets

        default:
          description: Error
          schema:
            $ref: "#/definitions/errorResponse"
    post:
      security:
        - Bearer: []
      tags: ["Secret"]
      description: Create a new secret
      operationId: postSecrets
      parameters:
        - $ref: "#/parameters/secretRequired"
      responses:
        201:
          description: Response contains object with key `secrets` and value of array of secret ids
          schema:
            type: object
            properties:
              secret:
                $ref: "#/definitions/secretResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/errorResponse"

  /secrets/{secretId}:
    parameters:
      - $ref: "#/parameters/secretId"

    get:
      security:
        - Bearer: []
      tags: ["Secret"]
      description: Get secret
      operationId: getSecretById
      responses:
        200:
          description: Response contains object with key `secrets` and value of array of secret ids
          schema:
            type: object
            properties:
              secret:
                $ref: "#/definitions/secretResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/errorResponse"
    patch:
      security:
        - Bearer: []
      tags: ["Secret"]
      description: Update a secret
      operationId: patchSecretById
      parameters:
        - $ref: "#/parameters/secretOptional"
      responses:
        200:
          description: Response contains object with key `secrets` and value of array of secret ids
          schema:
            type: object
            properties:
              secret:
                $ref: "#/definitions/secretResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/errorResponse"

    delete:
      security:
        - Bearer: []
      tags: ["Secret"]
      description: Delete a secret
      operationId: deleteSecretById
      responses:
        204:
          description: On successful delation, returns empty body.
          schema:
            type: object
        default:
          description: Error
          schema:
            $ref: "#/definitions/errorResponse"